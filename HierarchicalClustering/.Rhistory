#amb variable en eix d'abcisses
marg <-table(dades[,k])/n
print(append("Categories=",levels(dades[,k])))
plot(marg,type="l",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]), las=3)
#x<-plot(marg,type="l",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]), xaxt="n")
#text(x=x+.25, y=-1, adj=1, levels(CountryName), xpd=TRUE, srt=25, cex=0.7)
paleta<-rainbow(length(levels(as.factor(P))))
for(c in 1:length(levels(as.factor(P)))){lines(rowperc[c,],col=paleta[c]) }
#with legend
png(file = paste("Variable",k,"_3.png",sep=""))
plot(marg,type="l",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]), las=3)
for(c in 1:length(levels(as.factor(P)))){lines(rowperc[c,],col=paleta[c])}
legend("topright", levels(as.factor(P)), col=paleta, lty=2, cex=0.6)
dev.off()
#condicionades a columna
plot(marg,type="n",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]), las=3)
paleta<-rainbow(length(levels(as.factor(P))))
for(c in 1:length(levels(as.factor(P)))){lines(colperc[c,],col=paleta[c]) }
#with legend
png(file = paste("Variable",k,"_4.png",sep=""))
plot(marg,type="n",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]), las=3)
for(c in 1:length(levels(as.factor(P)))){lines(colperc[c,],col=paleta[c])}
legend("topright", levels(as.factor(P)), col=paleta, lty=2, cex=0.6)
dev.off()
table<-table(dades[,k],P)
print("Cross Table:")
print(table)
print("Distribucions condicionades a columnes:")
print(colperc)
#diagrames de barres apilades
paleta<-rainbow(length(levels(dades[,k])))
barplot(table(dades[,k], as.factor(P)), beside=FALSE,col=paleta )
png(file = paste("Variable",k,"_5.png",sep=""))
barplot(table(dades[,k], as.factor(P)), beside=FALSE,col=paleta )
legend("topright",levels(as.factor(dades[,k])),pch=1,cex=0.5, col=paleta)
dev.off()
#diagrames de barres adosades
barplot(table(dades[,k], as.factor(P)), beside=TRUE,col=paleta )
png(file = paste("Variable",k,"_6.png",sep=""))
barplot(table(dades[,k], as.factor(P)), beside=TRUE,col=paleta)
legend("topright",levels(as.factor(dades[,k])),pch=1,cex=0.5, col=paleta)
dev.off()
print("Test Chi quadrat: ")
print(chisq.test(dades[,k], as.factor(P)))
print("valorsTest:")
print( ValorTestXquali(P,dades[,k]))
#calcular els pvalues de les quali
}
}
}#endfor
for(k in 1:K){
if (is.numeric(dades[,k])){
print(paste("Anàlisi per classes de la Variable:", names(dades)[k]))
boxplot(dades[,k]~P, main=paste("Boxplot of", names(dades)[k], "vs", nameP ), horizontal=TRUE)
barplot(tapply(dades[[k]], P, mean),main=paste("Means of", names(dades)[k], "by", nameP ))
abline(h=mean(dades[[k]]))
legend(0,mean(dades[[k]]),"global mean",bty="n")
print("Estadístics per groups:")
for(s in levels(as.factor(P))) {print(summary(dades[P==s,k]))}
o<-oneway.test(dades[,k]~P)
print(paste("p-valueANOVA:", o$p.value))
kw<-kruskal.test(dades[,k]~P)
print(paste("p-value Kruskal-Wallis:", kw$p.value))
pvalk[,k]<-ValorTestXnum(dades[,k], P)
print("p-values ValorsTest: ")
print(pvalk[,k])
}else{
if(class(dades[,k])[1]=="Date"){
print(summary(dades[,k]))
print(sd(dades[,k]))
#decide breaks: weeks, months, quarters...
hist(dades[,k],breaks="weeks")
}else{
#qualitatives
print(paste("Variable", names(dades)[k]))
table<-table(P,dades[,k])
#   print("Cross-table")
#   print(table)
rowperc<-prop.table(table,1)
colperc<-prop.table(table,2)
#  print("Distribucions condicionades a files")
# print(rowperc)
#ojo porque si la variable es true o false la identifica amb el tipus Logical i
#aquest no te levels, por tanto, coertion preventiva
dades[,k]<-as.factor(dades[,k])
marg <- table(as.factor(P))/n
print(append("Categories=",levels(as.factor(dades[,k]))))
#from next plots, select one of them according to your practical case
plot(marg,type="l",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]))
paleta<-rainbow(length(levels(dades[,k])))
for(c in 1:length(levels(dades[,k]))){lines(colperc[,c],col=paleta[c]) }
#with legend
png(file = paste("Variable",k,"_1.png",sep=""))
plot(marg,type="l",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]))
paleta<-rainbow(length(levels(dades[,k])))
for(c in 1:length(levels(dades[,k]))){lines(colperc[,c],col=paleta[c]) }
legend("topright", levels(dades[,k]), col=paleta, lty=2, cex=0.6)
dev.off()
#condicionades a classes
print(append("Categories=",levels(dades[,k])))
plot(marg,type="n",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]))
paleta<-rainbow(length(levels(dades[,k])))
for(c in 1:length(levels(dades[,k]))){lines(rowperc[,c],col=paleta[c]) }
#with legend
png(file = paste("Variable",k,"_2.png",sep=""))
plot(marg,type="n",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]))
paleta<-rainbow(length(levels(dades[,k])))
for(c in 1:length(levels(dades[,k]))){lines(rowperc[,c],col=paleta[c]) }
legend("topright", levels(dades[,k]), col=paleta, lty=2, cex=0.6)
dev.off()
#amb variable en eix d'abcisses
marg <-table(dades[,k])/n
print(append("Categories=",levels(dades[,k])))
plot(marg,type="l",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]), las=3)
#x<-plot(marg,type="l",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]), xaxt="n")
#text(x=x+.25, y=-1, adj=1, levels(CountryName), xpd=TRUE, srt=25, cex=0.7)
paleta<-rainbow(length(levels(as.factor(P))))
for(c in 1:length(levels(as.factor(P)))){lines(rowperc[c,],col=paleta[c]) }
#with legend
png(file = paste("Variable",k,"_3.png",sep=""))
plot(marg,type="l",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]), las=3)
for(c in 1:length(levels(as.factor(P)))){lines(rowperc[c,],col=paleta[c])}
legend("topright", levels(as.factor(P)), col=paleta, lty=2, cex=0.6)
dev.off()
#condicionades a columna
plot(marg,type="n",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]), las=3)
paleta<-rainbow(length(levels(as.factor(P))))
for(c in 1:length(levels(as.factor(P)))){lines(colperc[c,],col=paleta[c]) }
#with legend
png(file = paste("Variable",k,"_4.png",sep=""))
plot(marg,type="n",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]), las=3)
for(c in 1:length(levels(as.factor(P)))){lines(colperc[c,],col=paleta[c])}
legend("topright", levels(as.factor(P)), col=paleta, lty=2, cex=0.6)
dev.off()
table<-table(dades[,k],P)
print("Cross Table:")
print(table)
print("Distribucions condicionades a columnes:")
print(colperc)
#diagrames de barres apilades
paleta<-rainbow(length(levels(dades[,k])))
barplot(table(dades[,k], as.factor(P)), beside=FALSE,col=paleta )
png(file = paste("Variable",k,"_5.png",sep=""))
barplot(table(dades[,k], as.factor(P)), beside=FALSE,col=paleta )
legend("topright",levels(as.factor(dades[,k])),pch=1,cex=0.5, col=paleta)
dev.off()
#diagrames de barres adosades
barplot(table(dades[,k], as.factor(P)), beside=TRUE,col=paleta )
png(file = paste("Variable",k,"_6.png",sep=""))
barplot(table(dades[,k], as.factor(P)), beside=TRUE,col=paleta)
legend("topright",levels(as.factor(dades[,k])),pch=1,cex=0.5, col=paleta)
dev.off()
print("Test Chi quadrat: ")
print(chisq.test(dades[,k], as.factor(P)))
print("valorsTest:")
print( ValorTestXquali(P,dades[,k]))
#calcular els pvalues de les quali
}
}
}#endfor
for(k in 1:K){
if (is.numeric(dades[,k])){
print(paste("Anàlisi per classes de la Variable:", names(dades)[k]))
boxplot(dades[,k]~P, main=paste("Boxplot of", names(dades)[k], "vs", nameP ), horizontal=TRUE)
barplot(tapply(dades[[k]], P, mean),main=paste("Means of", names(dades)[k], "by", nameP ))
abline(h=mean(dades[[k]]))
legend(0,mean(dades[[k]]),"global mean",bty="n")
print("Estadístics per groups:")
for(s in levels(as.factor(P))) {print(summary(dades[P==s,k]))}
o<-oneway.test(dades[,k]~P)
print(paste("p-valueANOVA:", o$p.value))
kw<-kruskal.test(dades[,k]~P)
print(paste("p-value Kruskal-Wallis:", kw$p.value))
pvalk[,k]<-ValorTestXnum(dades[,k], P)
print("p-values ValorsTest: ")
print(pvalk[,k])
}else{
if(class(dades[,k])[1]=="Date"){
print(summary(dades[,k]))
print(sd(dades[,k]))
#decide breaks: weeks, months, quarters...
hist(dades[,k],breaks="weeks")
}else{
#qualitatives
print(paste("Variable", names(dades)[k]))
table<-table(P,dades[,k])
#   print("Cross-table")
#   print(table)
rowperc<-prop.table(table,1)
colperc<-prop.table(table,2)
#  print("Distribucions condicionades a files")
# print(rowperc)
#ojo porque si la variable es true o false la identifica amb el tipus Logical i
#aquest no te levels, por tanto, coertion preventiva
dades[,k]<-as.factor(dades[,k])
marg <- table(as.factor(P))/n
print(append("Categories=",levels(as.factor(dades[,k]))))
#from next plots, select one of them according to your practical case
plot(marg,type="l",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]))
paleta<-rainbow(length(levels(dades[,k])))
for(c in 1:length(levels(dades[,k]))){lines(colperc[,c],col=paleta[c]) }
#with legend
png(file = paste("Variable",k,"_1.png",sep=""))
plot(marg,type="l",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]))
paleta<-rainbow(length(levels(dades[,k])))
for(c in 1:length(levels(dades[,k]))){lines(colperc[,c],col=paleta[c]) }
legend("topright", levels(dades[,k]), col=paleta, lty=2, cex=0.6)
dev.off()
#condicionades a classes
print(append("Categories=",levels(dades[,k])))
plot(marg,type="n",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]))
paleta<-rainbow(length(levels(dades[,k])))
for(c in 1:length(levels(dades[,k]))){lines(rowperc[,c],col=paleta[c]) }
#with legend
png(file = paste("Variable",k,"_2.png",sep=""))
plot(marg,type="n",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]))
paleta<-rainbow(length(levels(dades[,k])))
for(c in 1:length(levels(dades[,k]))){lines(rowperc[,c],col=paleta[c]) }
legend("topright", levels(dades[,k]), col=paleta, lty=2, cex=0.6)
dev.off()
#amb variable en eix d'abcisses
marg <-table(dades[,k])/n
print(append("Categories=",levels(dades[,k])))
plot(marg,type="l",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]), las=3)
#x<-plot(marg,type="l",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]), xaxt="n")
#text(x=x+.25, y=-1, adj=1, levels(CountryName), xpd=TRUE, srt=25, cex=0.7)
paleta<-rainbow(length(levels(as.factor(P))))
for(c in 1:length(levels(as.factor(P)))){lines(rowperc[c,],col=paleta[c]) }
#with legend
png(file = paste("Variable",k,"_3.png",sep=""))
plot(marg,type="l",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]), las=3)
for(c in 1:length(levels(as.factor(P)))){lines(rowperc[c,],col=paleta[c])}
legend("topright", levels(as.factor(P)), col=paleta, lty=2, cex=0.6)
dev.off()
#condicionades a columna
plot(marg,type="n",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]), las=3)
paleta<-rainbow(length(levels(as.factor(P))))
for(c in 1:length(levels(as.factor(P)))){lines(colperc[c,],col=paleta[c]) }
#with legend
png(file = paste("Variable",k,"_4.png",sep=""))
plot(marg,type="n",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]), las=3)
for(c in 1:length(levels(as.factor(P)))){lines(colperc[c,],col=paleta[c])}
legend("topright", levels(as.factor(P)), col=paleta, lty=2, cex=0.6)
dev.off()
table<-table(dades[,k],P)
print("Cross Table:")
print(table)
print("Distribucions condicionades a columnes:")
print(colperc)
#diagrames de barres apilades
paleta<-rainbow(length(levels(dades[,k])))
barplot(table(dades[,k], as.factor(P)), beside=FALSE,col=paleta )
png(file = paste("Variable",k,"_5.png",sep=""))
barplot(table(dades[,k], as.factor(P)), beside=FALSE,col=paleta )
legend("topright",levels(as.factor(dades[,k])),pch=1,cex=0.5, col=paleta)
dev.off()
#diagrames de barres adosades
barplot(table(dades[,k], as.factor(P)), beside=TRUE,col=paleta )
png(file = paste("Variable",k,"_6.png",sep=""))
barplot(table(dades[,k], as.factor(P)), beside=TRUE,col=paleta)
legend("topright",levels(as.factor(dades[,k])),pch=1,cex=0.5, col=paleta)
dev.off()
print("Test Chi quadrat: ")
print(chisq.test(dades[,k], as.factor(P)))
print("valorsTest:")
print( ValorTestXquali(P,dades[,k]))
#calcular els pvalues de les quali
}
}
}#endfor
boxplot(dades[,k]~P, main=paste("Boxplot of", names(dades)[k], "vs", nameP ), horizontal=TRUE)
for(k in 1:K){
if (is.numeric(dades[,k])){
print(paste("Anàlisi per classes de la Variable:", names(dades)[k]))
png(file = paste("Variable",k,"_1.png",sep=""))
boxplot(dades[,k]~P, main=paste("Boxplot of", names(dades)[k], "vs", nameP ), horizontal=TRUE)
dev.off()
png(file = paste("Variable",k,"_2.png",sep=""))
barplot(tapply(dades[[k]], P, mean),main=paste("Means of", names(dades)[k], "by", nameP ))
abline(h=mean(dades[[k]]))
legend(0,mean(dades[[k]]),"global mean",bty="n")
dev.off()
print("Estadístics per groups:")
for(s in levels(as.factor(P))) {print(summary(dades[P==s,k]))}
o<-oneway.test(dades[,k]~P)
print(paste("p-valueANOVA:", o$p.value))
kw<-kruskal.test(dades[,k]~P)
print(paste("p-value Kruskal-Wallis:", kw$p.value))
pvalk[,k]<-ValorTestXnum(dades[,k], P)
print("p-values ValorsTest: ")
print(pvalk[,k])
}else{
if(class(dades[,k])[1]=="Date"){
print(summary(dades[,k]))
print(sd(dades[,k]))
#decide breaks: weeks, months, quarters...
hist(dades[,k],breaks="weeks")
}else{
#qualitatives
print(paste("Variable", names(dades)[k]))
table<-table(P,dades[,k])
#   print("Cross-table")
#   print(table)
rowperc<-prop.table(table,1)
colperc<-prop.table(table,2)
#  print("Distribucions condicionades a files")
# print(rowperc)
#ojo porque si la variable es true o false la identifica amb el tipus Logical i
#aquest no te levels, por tanto, coertion preventiva
dades[,k]<-as.factor(dades[,k])
marg <- table(as.factor(P))/n
print(append("Categories=",levels(as.factor(dades[,k]))))
#from next plots, select one of them according to your practical case
plot(marg,type="l",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]))
paleta<-rainbow(length(levels(dades[,k])))
for(c in 1:length(levels(dades[,k]))){lines(colperc[,c],col=paleta[c]) }
#with legend
png(file = paste("Variable",k,"_1.png",sep=""))
plot(marg,type="l",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]))
paleta<-rainbow(length(levels(dades[,k])))
for(c in 1:length(levels(dades[,k]))){lines(colperc[,c],col=paleta[c]) }
legend("topright", levels(dades[,k]), col=paleta, lty=2, cex=0.6)
dev.off()
#condicionades a classes
print(append("Categories=",levels(dades[,k])))
plot(marg,type="n",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]))
paleta<-rainbow(length(levels(dades[,k])))
for(c in 1:length(levels(dades[,k]))){lines(rowperc[,c],col=paleta[c]) }
#with legend
png(file = paste("Variable",k,"_2.png",sep=""))
plot(marg,type="n",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]))
paleta<-rainbow(length(levels(dades[,k])))
for(c in 1:length(levels(dades[,k]))){lines(rowperc[,c],col=paleta[c]) }
legend("topright", levels(dades[,k]), col=paleta, lty=2, cex=0.6)
dev.off()
#amb variable en eix d'abcisses
marg <-table(dades[,k])/n
print(append("Categories=",levels(dades[,k])))
plot(marg,type="l",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]), las=3)
#x<-plot(marg,type="l",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]), xaxt="n")
#text(x=x+.25, y=-1, adj=1, levels(CountryName), xpd=TRUE, srt=25, cex=0.7)
paleta<-rainbow(length(levels(as.factor(P))))
for(c in 1:length(levels(as.factor(P)))){lines(rowperc[c,],col=paleta[c]) }
#with legend
png(file = paste("Variable",k,"_3.png",sep=""))
plot(marg,type="l",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]), las=3)
for(c in 1:length(levels(as.factor(P)))){lines(rowperc[c,],col=paleta[c])}
legend("topright", levels(as.factor(P)), col=paleta, lty=2, cex=0.6)
dev.off()
#condicionades a columna
plot(marg,type="n",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]), las=3)
paleta<-rainbow(length(levels(as.factor(P))))
for(c in 1:length(levels(as.factor(P)))){lines(colperc[c,],col=paleta[c]) }
#with legend
png(file = paste("Variable",k,"_4.png",sep=""))
plot(marg,type="n",ylim=c(0,1),main=paste("Prop. of pos & neg by",names(dades)[k]), las=3)
for(c in 1:length(levels(as.factor(P)))){lines(colperc[c,],col=paleta[c])}
legend("topright", levels(as.factor(P)), col=paleta, lty=2, cex=0.6)
dev.off()
table<-table(dades[,k],P)
print("Cross Table:")
print(table)
print("Distribucions condicionades a columnes:")
print(colperc)
#diagrames de barres apilades
paleta<-rainbow(length(levels(dades[,k])))
barplot(table(dades[,k], as.factor(P)), beside=FALSE,col=paleta )
png(file = paste("Variable",k,"_5.png",sep=""))
barplot(table(dades[,k], as.factor(P)), beside=FALSE,col=paleta )
legend("topright",levels(as.factor(dades[,k])),pch=1,cex=0.5, col=paleta)
dev.off()
#diagrames de barres adosades
barplot(table(dades[,k], as.factor(P)), beside=TRUE,col=paleta )
png(file = paste("Variable",k,"_6.png",sep=""))
barplot(table(dades[,k], as.factor(P)), beside=TRUE,col=paleta)
legend("topright",levels(as.factor(dades[,k])),pch=1,cex=0.5, col=paleta)
dev.off()
print("Test Chi quadrat: ")
print(chisq.test(dades[,k], as.factor(P)))
print("valorsTest:")
print( ValorTestXquali(P,dades[,k]))
#calcular els pvalues de les quali
}
}
}#endfor
#CHECKEJA LA INSTALACIO DELS PACKAGES NECESARIS
list.of.packages <- c("rstudioapi","NbClust") #posar els packages que es facin servir
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library("rstudioapi") #posar els packages que es facin servir
library(cluster)
library(NbClust)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #path al dicteroy del script
dd <- readRDS(file = "Preprocessed.rds")
names(dd)
dim(dd)
summary(dd)
attach(dd)
#set a list of numerical variables
names(dd)
#EMPEZAMOS AQUI EL HIERARCHICAL xdxdxd
ddNoData <- dd
ddNoData$Date=NULL
actives<-c(1, 3:25) #We ignore date column because it causes problems
dissimMatrix <- daisy(dd[,actives], metric = "gower", stand=TRUE)
distMatrix<-dissimMatrix^2
clust <- NbClust(diss=dissimMatrix, distance=NULL, min.nc=2, max.nc=10, method = "ward.D2",index="cindex" , alphaBeale = 0.1)
clust$All.index #cindex, mclain minimo. silhouette y dunn maximo.
clust$Best.nc
clust <- NbClust(diss=dissimMatrix, distance=NULL, min.nc=2, max.nc=10, method = "ward.D2",index="mclain" , alphaBeale = 0.1)
#k=2 es mejor, pero alomejor hay poco que estudiar. Si los dos centroides spn muy parecidos, no hay mucho que estudiar
#entonces seria mejor k=5 (en caso que no haya mucho que estudiar)
#tener en cuenta que dunn si hay muchos clusters le va mejor asi que a los grandes no mucho caso
h1 <- hclust(distMatrix,method="ward.D2")  # NOTICE THE COST
plot(h1)
plot(h1)
rect.hclust(h1,2)
c2 <- cutree(h1,2) #cogemos 2 por los KPI anteriores
#k=2 es mejor, pero alomejor hay poco que estudiar. Si los dos centroides spn muy parecidos, no hay mucho que estudiar
#entonces seria mejor k=5 (en caso que no haya mucho que estudiar)
#tener en cuenta que dunn si hay muchos clusters le va mejor asi que a los grandes no mucho caso
h1 <- hclust(distMatrix,method="ward.D2")  # NOTICE THE COST
plot(h1)
#CHECKEJA LA INSTALACIO DELS PACKAGES NECESARIS
list.of.packages <- c("rstudioapi","NbClust") #posar els packages que es facin servir
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library("rstudioapi") #posar els packages que es facin servir
library(cluster)
library(NbClust)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #path al dicteroy del script
dd <- readRDS(file = "Preprocessed.rds")
names(dd)
dim(dd)
summary(dd)
attach(dd)
#set a list of numerical variables
names(dd)
#EMPEZAMOS AQUI EL HIERARCHICAL xdxdxd
ddNoData <- dd
ddNoData$Date=NULL
actives<-c(1, 3:25) #We ignore date column because it causes problems
dissimMatrix <- daisy(dd[,actives], metric = "gower", stand=TRUE)
distMatrix<-dissimMatrix^2
#k=2 es mejor, pero alomejor hay poco que estudiar. Si los dos centroides spn muy parecidos, no hay mucho que estudiar
#entonces seria mejor k=5 (en caso que no haya mucho que estudiar)
#tener en cuenta que dunn si hay muchos clusters le va mejor asi que a los grandes no mucho caso
h1 <- hclust(distMatrix,method="ward.D2")  # NOTICE THE COST
plot(h1)
#CHECKEJA LA INSTALACIO DELS PACKAGES NECESARIS
list.of.packages <- c("rstudioapi","NbClust") #posar els packages que es facin servir
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library("rstudioapi") #posar els packages que es facin servir
library(cluster)
library(NbClust)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #path al dicteroy del script
dd <- readRDS(file = "Preprocessed.rds")
names(dd)
dim(dd)
summary(dd)
attach(dd)
#set a list of numerical variables
names(dd)
#EMPEZAMOS AQUI EL HIERARCHICAL xdxdxd
ddNoData <- dd
ddNoData$Date=NULL
actives<-c(1, 3:25) #We ignore date column because it causes problems
dissimMatrix <- daisy(dd[,actives], metric = "gower", stand=TRUE)
distMatrix<-dissimMatrix^2
clust <- NbClust(diss=dissimMatrix, distance=NULL, min.nc=2, max.nc=10, method = "ward.D2",index="cindex" , alphaBeale = 0.1)
clust$All.index #cindex, mclain minimo. silhouette y dunn maximo.
clust$Best.nc
clust <- NbClust(diss=dissimMatrix, distance=NULL, min.nc=2, max.nc=10, method = "ward.D2",index="mclain" , alphaBeale = 0.1)
#k=2 es mejor, pero alomejor hay poco que estudiar. Si los dos centroides spn muy parecidos, no hay mucho que estudiar
#entonces seria mejor k=5 (en caso que no haya mucho que estudiar)
#tener en cuenta que dunn si hay muchos clusters le va mejor asi que a los grandes no mucho caso
h1 <- hclust(distMatrix,method="ward.D2")  # NOTICE THE COST
plot(h1)
#CHECKEJA LA INSTALACIO DELS PACKAGES NECESARIS
list.of.packages <- c("rstudioapi","NbClust") #posar els packages que es facin servir
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library("rstudioapi") #posar els packages que es facin servir
library(cluster)
library(NbClust)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #path al dicteroy del script
dd <- readRDS(file = "Preprocessed.rds")
names(dd)
dim(dd)
summary(dd)
attach(dd)
#set a list of numerical variables
names(dd)
#EMPEZAMOS AQUI EL HIERARCHICAL xdxdxd
ddNoData <- dd
ddNoData$Date=NULL
actives<-c(1, 3:25) #We ignore date column because it causes problems
dissimMatrix <- daisy(dd[,actives], metric = "gower", stand=TRUE)
distMatrix<-dissimMatrix^2
h1 <- hclust(distMatrix,method="ward.D2")  # NOTICE THE COST
plot(h1)
clust <- NbClust(diss=dissimMatrix, distance=NULL, min.nc=2, max.nc=10, method = "ward.D2",index="cindex" , alphaBeale = 0.1)
clust$All.index #cindex, mclain minimo. silhouette y dunn maximo.
clust$Best.nc
clust <- NbClust(diss=dissimMatrix, distance=NULL, min.nc=2, max.nc=10, method = "ward.D2",index="mclain" , alphaBeale = 0.1)
clust <- NbClust(diss=dissimMatrix, distance=NULL, min.nc=2, max.nc=10, method = "ward.D2",index="dunn" , alphaBeale = 0.1)
clust$All.index #cindex, mclain minimo. silhouette y dunn maximo.
clust$Best.nc
rect.hclust(h1,2)
rect.hclust(h1,5)
rect.hclust(h1,3)
